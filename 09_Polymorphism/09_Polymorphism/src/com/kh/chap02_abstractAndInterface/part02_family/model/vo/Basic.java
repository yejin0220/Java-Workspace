package com.kh.chap02_abstractAndInterface.part02_family.model.vo;

public interface Basic {
	
	
	/*
	 * 인터페이스
	 * 
	 * [표현법]
	 * [접근제한자] interface 인터페이스명 {}
	 * 
	 * - 상수필드와 추상 메소드로만 이루어니 추상 클래스의 변형체
	 * - 인터페이스에서 필드는 무 조 건 상수필드이다.
	 * - 인터페이스에서 메소드는 무 조 건 추상메소드이다.
	 * - 무조건 구현해야하는게 있을 때 인터페이스를 만들어서 상속하게 된다.
	 * - 인터페이스는 다중 상속을 허용한다.
	 * 	(결국 메소드에 대한 정의만 하고 있어서 메소드가 겹치더라도 최종 구현 부분은 구현 클래스에서 이루어 질것이기 때문에 다중상속(구현)이 가능함.)
	 * - 추상 클래스와 다르게 조금 더 강한 규칙성과 강제성을 가지는게 인터페이스이다.
	 * 
	 * 
	 * 
	 * 추상클래스와 인터페이스
	 * 
	 * 1. 공통점
	 * 	- 객체 생성(new)은 불가능하나, 참조변수로서 사용이 가능하다.(즉, 다형성을 적용할 수 있다.)
	 * 	- 상속(구현)하는 클래스에 추상메소드를 구현하도록 강제한다.
	 * 	
	 * 2. 차이점
	 * 	* 추상클래스는 클래스 내에 인스턴스 변수, 메소드를 생성이 가능하고, 추상메소드가 포함되었거나 abstract라는 키워드로 클래그사 정의 되어 있음
	 * 	* 인터페이스는 인스턴스 변수, 메소드 생성이 불가능하며 모든 변수는 상수필드, 모든 메소드는 추상메소드로 정의되어 있다.
	 * 
	 *  - 존재하는 목적이 다르다.
	 *  * 추상클래스는 추상클래스를 상속받아서 기능을 이용하고, 클래스를 확장하는데 목적이 있다.
	 *  * 인터페이스는 클래스의 기능(함수) 구현을 강제하기 위해 사용된다, 즉, 구현을 강제함으로써 구현객체의 동일한 동작을 보장할 수 있다.
	 *  
	 *  
	 * extends 와 implements
	 * 	- 클래스와 상속관계일때 : 클래스명 extends 부모클래스명
	 * 	- 클래스와 인터페이스의 구현 관계일때 : 클래스명 implements 인터페이스명
	 * 	- 인터페이스간에 상속 관계일때 : 인터페이스명 extends 인터페이스명, 인터페이스명
	 * 
	 */
	
	
	
	
	
	
	
	
		
	//필드 == 인서턴스 변수 == 멤버변수
	//인터페이스에는 오로지 상수 필드만 정의할 수 있음
	//내가 어떤 변수를 선언하더라고 상수필드로 자동으로 변환됨
	//일반적으로 선언하는 int num =10;을 작성하더라도
	//앞에 public static final필드가 자동으로 붙어 상수로 선언됨
	//따라서 num = 11; 등으로 값을 변경할 수 없음
	//기울임 글꼴 => static 변수
	
	/*public static final*/ int num = 10;
	
	//메서드 
	/*public abstract*/ void eat( );  
	void sleep();
		//인터페이스에서는 무조건 추상메소드만 정의할 수 있기 때문에 메소드의 몸통부 작성이 불가능하며 {}작성할 수 없음
		//또한 자동으로 public abstract가 정의되어 있음
	
	
		
		
	
}
